# OTRUST Database Configuration Guide

This comprehensive guide covers how to set up and configure the database components required for running OTRUST. The system uses a hybrid data architecture with MongoDB for primary data storage and LevelDB for blockchain operations.

## Database Architecture Overview

OTRUST uses two primary data stores:

1. **MongoDB** - Main database for storing:
   - Claims (statements with semantic structure)
   - Users and authentication data
   - Proof chains (verifications and disputes)
   - Metadata and relationships

2. **LevelDB** - Blockchain storage for:
   - Block headers and chain structure
   - Transaction hashes
   - Cryptographic proofs
   - Merkle trees

This hybrid approach provides the best of both worlds: MongoDB's rich query capabilities and LevelDB's efficient key-value storage optimized for blockchain operations.

## MongoDB Setup

### Option 1: Manual MongoDB Installation

#### Prerequisites
- MongoDB 4.4 or higher
- Sufficient disk space (recommend at least 10GB for production)
- Basic knowledge of MongoDB security

#### Step 1: Install MongoDB

**Ubuntu/Debian:**
```bash
# Import MongoDB public GPG key
wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -

# Create a list file for MongoDB
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list

# Reload package database
sudo apt-get update

# Install MongoDB packages
sudo apt-get install -y mongodb-org

# Start MongoDB service
sudo systemctl start mongod

# Enable MongoDB to start on boot
sudo systemctl enable mongod
```

**macOS (using Homebrew):**
```bash
# Install MongoDB
brew tap mongodb/brew
brew install mongodb-community@4.4

# Start MongoDB service
brew services start mongodb-community@4.4
```

**Windows:**
1. Download the MongoDB installer from the [official MongoDB website](https://www.mongodb.com/try/download/community)
2. Run the installer and follow the installation wizard
3. Optionally install MongoDB Compass (GUI tool)
4. Ensure the MongoDB service is running through Windows Services

#### Step 2: Create a Database and User

Connect to MongoDB shell:
```bash
mongosh
```

Create a database and user for OTRUST:
```javascript
// Switch to admin database
use admin

// Create admin user if not exists
db.createUser({
  user: "adminUser",
  pwd: "securePassword", // Change this to a secure password
  roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
})

// Create OTRUST database and switch to it
use otrust

// Create application user with restricted permissions
db.createUser({
  user: "otrustUser",
  pwd: "otrustPassword", // Change this to a secure password
  roles: [
    { role: "readWrite", db: "otrust" }
  ]
})
```

#### Step 3: Configure OTRUST to Use Your MongoDB

Edit your `.env` file and update the MongoDB connection settings:

```
MONGODB_URI=mongodb://otrustUser:otrustPassword@localhost:27017/otrust
MONGODB_USER=otrustUser
MONGODB_PASSWORD=otrustPassword
MONGODB_AUTH_SOURCE=admin
```

### Option 2: MongoDB Atlas (Cloud Hosted)

If you prefer not to manage your own MongoDB instance, MongoDB Atlas provides a free tier for development and testing.

#### Step 1: Create a MongoDB Atlas Account

1. Go to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas/register)
2. Sign up for a free account
3. Follow the getting started guide to create a new project

#### Step 2: Create a Cluster

1. Click "Build a Cluster"
2. Select the free tier option
3. Choose your preferred cloud provider and region
4. Click "Create Cluster" (this may take a few minutes)

#### Step 3: Configure Network Access

1. Go to the "Network Access" tab
2. Click "Add IP Address"
3. For development, you can add your current IP or use "0.0.0.0/0" to allow all connections (not recommended for production)
4. Click "Confirm"

#### Step 4: Create a Database User

1. Go to the "Database Access" tab
2. Click "Add New Database User"
3. Create a username and secure password
4. Select "Read and write to any database" for role
5. Click "Add User"

#### Step 5: Get Your Connection String

1. Go to the "Clusters" tab
2. Click "Connect"
3. Select "Connect your application"
4. Copy the connection string

#### Step 6: Configure OTRUST to Use Atlas

Edit your `.env` file and update the MongoDB connection string:

```
MONGODB_URI=mongodb+srv://<username>:<password>@<cluster-url>/otrust?retryWrites=true&w=majority
```

Replace `<username>`, `<password>`, and `<cluster-url>` with your Atlas credentials.

### Option 3: Docker MongoDB (Simplest)

The included Docker Compose file already configures MongoDB for you. This is the simplest option if you're using Docker.

```bash
# Just run this command in the project directory
docker-compose up -d
```

This will:
1. Pull the official MongoDB image
2. Create a container running MongoDB
3. Configure it with the credentials specified in docker-compose.yml
4. Create a persistent volume for data storage
5. Link it to the OTRUST application container

## LevelDB Setup

LevelDB is used for the blockchain component and is handled automatically by the OTRUST application. No manual setup is required, but you should configure the storage location.

### Configure LevelDB Storage Location

In your `.env` file:

```
BLOCKCHAIN_PATH=./blockchain
```

You can change this path to any location with sufficient disk space. For production, consider using a path on a dedicated storage volume.

If using Docker, a volume is automatically created and mounted at the specified path inside the container.

## Database Schema

### MongoDB Collections

OTRUST uses the following collections in MongoDB:

1. **claims** - Stores all claims with their semantic structure
   - Fields: id, claim, evidence, signature, publicKey, type, timestamp, semantic, proofChain, credibilityScore, blockchainRef, etc.

2. **users** - Stores user profiles and reputation data
   - Fields: publicKey, displayName, score, verified, disputed, role, etc.

The schema is defined in the code using Mongoose and includes indexes for optimized queries.

### LevelDB Structure

LevelDB stores blockchain data with the following key patterns:

1. `chain` - Stores the latest blockchain state
2. `archive_<start_index>_<end_index>` - Stores archived blocks
3. `<transaction_id>` - Individual transaction lookups

## Backup and Maintenance

### MongoDB Backup

**Simple Backup:**
```bash
# Replace with your database name and backup path
mongodump --db otrust --out /path/to/backup/directory
```

**Scheduled Backup (Linux/macOS):**

Create a backup script:
```bash
#!/bin/bash
BACKUP_DIR="/path/to/backup/directory/$(date +%Y-%m-%d)"
mkdir -p $BACKUP_DIR
mongodump --db otrust --out $BACKUP_DIR
```

Add to crontab for daily backups at midnight:
```
0 0 * * * /path/to/backup-script.sh
```

### LevelDB Backup

LevelDB should be backed up when the application is not running:

```bash
# Stop the OTRUST application
sudo systemctl stop otrust-server  # If using systemd

# Copy blockchain directory
cp -r /path/to/blockchain /path/to/backup/blockchain_$(date +%Y-%m-%d)

# Restart the application
sudo systemctl start otrust-server
```

## Monitoring

### MongoDB Monitoring

Use MongoDB Compass for a GUI interface to monitor your database, or set up Prometheus with the MongoDB exporter.

Basic command-line monitoring:
```bash
# Connect to MongoDB shell
mongosh

# Check database stats
use otrust
db.stats()

# Check collection sizes
db.claims.stats()
db.users.stats()
```

### Checking Database Health in OTRUST

OTRUST provides a health endpoint that includes database status:

```bash
curl http://localhost:3000/health
```

Sample response:
```json
{
  "status": "ok",
  "version": "1.0.0",
  "db": "connected",
  "blockchain": {
    "blocks": 42,
    "isValid": true
  },
  "uptime": 3600,
  "environment": "production"
}
```

## Troubleshooting

### Common MongoDB Issues

1. **Connection Refused**
   - Check if MongoDB is running: `sudo systemctl status mongod`
   - Verify firewall settings: `sudo ufw status`
   - Check MongoDB logs: `cat /var/log/mongodb/mongod.log`

2. **Authentication Failed**
   - Verify credentials in `.env` file
   - Check if the user exists: `use admin; db.system.users.find({user: "otrustUser"})`
   - Re-create user if necessary

3. **Performance Issues**
   - Check if indexes are being used: `db.claims.find({...}).explain()`
   - Consider increasing MongoDB cache size in `/etc/mongod.conf`
   - Monitor system resources: `htop`, `iostat`

### Common LevelDB Issues

1. **Corruption**
   - LevelDB may become corrupted after improper shutdowns
   - Solution: Delete the blockchain directory and restart (blockchain will rebuild)

2. **Disk Space**
   - Check available disk space: `df -h`
   - Configure archive settings to manage growth

## Advanced Configuration

### Sharding for Large Deployments

For very large installations, MongoDB can be configured with sharding:

1. Set up a sharded cluster with multiple shards
2. Configure OTRUST to connect to the mongos router
3. Create sharded collections:
   ```javascript
   sh.enableSharding("otrust")
   sh.shardCollection("otrust.claims", { "semantic.subject": "hashed" })
   ```

### Replication for High Availability

For production environments requiring high availability:

1. Set up a MongoDB replica set with at least 3 nodes
2. Update the connection string to include all replica set members:
   ```
   MONGODB_URI=mongodb://user:password@node1:27017,node2:27017,node3:27017/otrust?replicaSet=rs0
   ```

## Performance Tuning

### MongoDB Indexes

OTRUST automatically creates indexes on startup, but you can manually optimize them:

```javascript
// Create compound indexes for common query patterns
db.claims.createIndex({ "semantic.subject": 1, "semantic.predicate": 1 })
db.claims.createIndex({ "publicKey": 1, "timestamp": -1 })
db.claims.createIndex({ "credibilityScore": -1 })

// Text search index
db.claims.createIndex({ "claim": "text" })
```

### LevelDB Performance

Adjust LevelDB parameters in `.env`:

```
BLOCKCHAIN_CACHE_SIZE=64  # MB of cache for LevelDB
BLOCKCHAIN_BLOCK_SIZE=10  # Transactions per block
```

## Security Considerations

### MongoDB Security Checklist

- ✅ Use authentication with strong passwords
- ✅ Enable TLS/SSL for connections
- ✅ Run MongoDB on a non-default port (not 27017)
- ✅ Configure IP whitelisting
- ✅ Use least privilege principle for database users
- ✅ Regular security updates

### Production Security Configuration

For production MongoDB deployments:

1. Edit `/etc/mongod.conf`:
   ```yaml
   security:
     authorization: enabled
   
   net:
     port: 27117  # Non-default port
     bindIp: 127.0.0.1  # Only accept local connections
   
   # Enable encryption
   net:
     ssl:
       mode: requireSSL
       PEMKeyFile: /path/to/mongodb.pem
   ```

2. Generate TLS certificates:
   ```bash
   openssl req -newkey rsa:2048 -new -x509 -days 365 -nodes -out mongodb-cert.crt -keyout mongodb-cert.key
   cat mongodb-cert.key mongodb-cert.crt > mongodb.pem
   ```

## Data Migration

### Migrating Between MongoDB Instances

To migrate data from one MongoDB instance to another:

```bash
# Dump data from source
mongodump --uri="mongodb://sourceUser:password@source-host:27017/otrust" --out=dump

# Restore to destination
mongorestore --uri="mongodb://destUser:password@dest-host:27017/otrust" dump/otrust
```

### Upgrading OTRUST

When upgrading to a new version of OTRUST:

1. Back up your MongoDB data
2. Back up your blockchain directory
3. Check the upgrade notes for schema changes
4. Run any migration scripts provided with the new version
5. Update the OTRUST application
6. Restart the service

## Further Resources

- [MongoDB Documentation](https://docs.mongodb.com/)
- [LevelDB GitHub Repository](https://github.com/google/leveldb)
- [Docker MongoDB Documentation](https://hub.docker.com/_/mongo)
- [MongoDB Atlas Documentation](https://docs.atlas.mongodb.com/)
